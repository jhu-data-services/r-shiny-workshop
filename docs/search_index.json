[["index.html", "Interactive Data Visualization with R-Shiny Introduction Learning Objectives", " Interactive Data Visualization with R-Shiny JHU Data Services 2021-01-08 Introduction Welcome to the JHU Data Services Shiny tutorial! Shiny is a framework in the R application for creating interactive R applications using R code. With Shiny you can build powerful interactive dashboards and visualizations with minimal to no knowledge of HTML, CSS, or JavaScript. Learning Objectives By the end of this tutorial, you should be able to: Understand how a Shiny app is structured and runs Be able to configure the aesthetics of a Shiny app Understand the reactive programming model of Shiny Be able to implement a fully functioning Shiny app "],["setup.html", "Setup", " Setup Before we can get started you will need to ensure you have the necessary libraries installed. To install the Shiny package ensure you are connected to the internet, then run: install.packages(&quot;shiny&quot;) If you are using RStudio (which is highly recommended for this tutorial) you can also install Shiny by selecting the Packages tab, then selecting the Install button and entering Shiny in the Packages: (separate multiple with space or comma): form field and pressing install. library(shiny) "],["introduction-to-r-shiny.html", "Lesson 1 Introduction to R-Shiny 1.1 Structure of a Shiny App 1.2 Building Your First Shiny App", " Lesson 1 Introduction to R-Shiny 1.1 Structure of a Shiny App Shiny apps are run from a single script app.R that is made up of three parts: A user interface object: The user interface object controls how your Shiny app looks. A server function: The server function controls how your Shiny app runs. A shinyApp function: The shinyApp function builds your Shiny app. The user interface and server components of a Shiny app can be stored in separate files, ui.R and server.R, or together in a single file, app.R. It will be easier for us to work with a single file during this tutorial, so we will use the unified app.R structure for this tutorial. A Shiny app without any content looks like: library(shiny) ui &lt;- server &lt;- shinyApp(ui = ui, server = server) Donâ€™t try to run this app as it will fail since the ui and server content has not been populated yet. Instead we are going to use this as a skeleton to begin building our first Shiny app! 1.2 Building Your First Shiny App Lets begin by building a very simple app to help us build our intuition about how Shiny apps work. Create a new directory called shiny-hello-world in a directory of your choice. From within that directory create a new file called app.R. Within app.R we are going to add the three components we need for a working Shiny app, ui, server, and shinyApp that we showed the code for above, except now we will populate them so your app.R can successfully run. Your app.R should look like: library(shiny) ui &lt;- fluidPage( ) server &lt;- function(input, output, session) { } shinyApp(ui, server) If you are using R-Studio, rather than typing all of the above code into your app.R file, you can type shinyapp and then press Shift + Enter and the Shiny app skeleton will be generated automatically. "],["designing-shiny-user-interfaces.html", "Lesson 2 Designing Shiny User Interfaces 2.1 Adding Control Widgets", " Lesson 2 Designing Shiny User Interfaces This section of the tutorial will show you how to design the interface to your Shiny app. 2.1 Adding Control Widgets The primary means of interacting with a Shiny app are with control widgets. Control elements provide a way for your users to communicate with the underlying R process without having to program. "],["adding-control-widgets-to-shiny.html", "Lesson 3 Adding Control Widgets to Shiny 3.1 Example one 3.2 Example two", " Lesson 3 Adding Control Widgets to Shiny Some significant applications are demonstrated in this chapter. WICKHAM (2021) 3.1 Example one 3.2 Example two References "],["displaying-reactive-output.html", "Lesson 4 Displaying Reactive Output", " Lesson 4 Displaying Reactive Output We have finished a nice book. "],["references.html", "References", " References "]]
